/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UC4.Producer;

import UC4.Producer.Sensor.ISensor;
import UC4.Producer.Sensor.ISensor_Main;
import UC4.Producer.Sensor.MSensor;

import java.util.Properties;
import org.apache.log4j.BasicConfigurator;

/**
 *
 * Producer process class.
 */
public class PProducer extends javax.swing.JFrame {
    /**
     * Producers started flag.
     */
    private boolean producersStarted = false;

    /**
     * Creates new form PProducer.
     */
    public PProducer() {
        initComponents();
    }
    
    /**
     * Sensor monitor object instance.
     */
    public static ISensor mSensor = MSensor.getInstance();
    
    /**
     * Initializes Producer threads.
     */
    public static void initProducers() {
        /*
        ISensor mSensor = MSensor.getInstance();
        
        ArrayList<Thread> producers = new ArrayList<>();
        for (int i = 0; i < 3; i++) {
            Thread producer = new Thread(TProducer.getInstance(i, mSensor));
            producers.add(producer);
            
            // start producers
            producer.start();
        }
        
        try {
            for (Thread t : producers)
                t.join();
        } catch (InterruptedException ex) {}
        
        System.out.println("Producer threads finished");
        */
        
        //BasicConfigurator.configure();
        
        //ISensor mSensor = MSensor.getInstance();
        
        String HOST = "localhost";
        int PORT = 9092;
        
        Properties properties = new Properties();
        String hosts = "";
        for (int i = 0; i < 3; i++) {
            hosts += HOST + ":" + (PORT + i);
            if (i != 2) hosts += ",";
        }
        properties.put("bootstrap.servers", hosts);
        properties.put("key.serializer", "org.apache.kafka.common.serialization.IntegerSerializer");
        properties.put("value.serializer", "org.apache.kafka.common.serialization.StringSerializer");
        
        Thread producer = new Thread(TProducer.getInstance(0, mSensor, properties));

        // start producer
        producer.start();
        
        try {
            producer.join();
        } catch (InterruptedException ex) {}
        
        System.out.println("Producer thread finished");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        basePanel = new javax.swing.JPanel();
        configPanel = new javax.swing.JPanel();
        centerConfigPanel = new javax.swing.JPanel();
        configPanelLabel = new javax.swing.JLabel();
        configFlowPanel = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        sendModeLabel = new javax.swing.JLabel();
        sendModeComboBox = new javax.swing.JComboBox<>();
        displayPanel = new javax.swing.JPanel();
        centerDisplayPanel = new javax.swing.JPanel();
        totalRecordsLabel = new javax.swing.JLabel();
        displayPanelLabel = new javax.swing.JLabel();
        producerConsoleLabel = new javax.swing.JLabel();
        displayTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("UC4 Producer Process");
        setBounds(new java.awt.Rectangle(50, 200, 800, 600));
        setSize(new java.awt.Dimension(800, 600));

        basePanel.setLayout(new java.awt.BorderLayout());

        configPanel.setBackground(new java.awt.Color(55, 55, 55));
        configPanel.setPreferredSize(new java.awt.Dimension(800, 300));

        centerConfigPanel.setBackground(new java.awt.Color(55, 55, 55));

        configPanelLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        configPanelLabel.setForeground(new java.awt.Color(255, 255, 255));
        configPanelLabel.setText("Config Panel");
        centerConfigPanel.add(configPanelLabel);

        configFlowPanel.setBackground(new java.awt.Color(55, 55, 55));
        configFlowPanel.setPreferredSize(new java.awt.Dimension(600, 200));
        configFlowPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 25, 80));

        startButton.setBackground(new java.awt.Color(55, 55, 55));
        startButton.setForeground(new java.awt.Color(255, 255, 255));
        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonActionPerformed(evt);
            }
        });
        configFlowPanel.add(startButton);

        sendModeLabel.setForeground(new java.awt.Color(255, 255, 255));
        sendModeLabel.setText("Sending mode");
        configFlowPanel.add(sendModeLabel);

        sendModeComboBox.setBackground(new java.awt.Color(55, 55, 55));
        sendModeComboBox.setForeground(new java.awt.Color(255, 255, 255));
        sendModeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Fire and forget", "Synchronous", "Asynchronous" }));
        configFlowPanel.add(sendModeComboBox);

        centerConfigPanel.add(configFlowPanel);

        javax.swing.GroupLayout configPanelLayout = new javax.swing.GroupLayout(configPanel);
        configPanel.setLayout(configPanelLayout);
        configPanelLayout.setHorizontalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configPanelLayout.createSequentialGroup()
                .addGap(50, 50, 50)
                .addComponent(centerConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 700, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(50, Short.MAX_VALUE))
        );
        configPanelLayout.setVerticalGroup(
            configPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, configPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(centerConfigPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25))
        );

        basePanel.add(configPanel, java.awt.BorderLayout.NORTH);

        displayPanel.setBackground(new java.awt.Color(65, 65, 65));
        displayPanel.setPreferredSize(new java.awt.Dimension(800, 300));

        centerDisplayPanel.setBackground(new java.awt.Color(65, 65, 65));
        centerDisplayPanel.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.CENTER, 5, 15));

        totalRecordsLabel.setBackground(new java.awt.Color(65, 65, 65));
        totalRecordsLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        totalRecordsLabel.setForeground(new java.awt.Color(255, 255, 255));
        totalRecordsLabel.setText("Total Records: 0");
        centerDisplayPanel.add(totalRecordsLabel);

        displayPanelLabel.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        displayPanelLabel.setForeground(new java.awt.Color(255, 255, 255));
        displayPanelLabel.setText("Display Panel");

        producerConsoleLabel.setFont(new java.awt.Font("Segoe UI", 0, 18)); // NOI18N
        producerConsoleLabel.setForeground(new java.awt.Color(255, 255, 255));
        producerConsoleLabel.setText("Producer Console");

        displayTextField.setEditable(false);
        displayTextField.setBackground(new java.awt.Color(55, 55, 55));
        displayTextField.setColumns(30);
        displayTextField.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        displayTextField.setForeground(new java.awt.Color(255, 255, 255));
        displayTextField.setFocusable(false);

        javax.swing.GroupLayout displayPanelLayout = new javax.swing.GroupLayout(displayPanel);
        displayPanel.setLayout(displayPanelLayout);
        displayPanelLayout.setHorizontalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(displayPanelLayout.createSequentialGroup()
                .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addGap(330, 330, 330)
                        .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(producerConsoleLabel)
                            .addComponent(displayPanelLabel)))
                    .addGroup(displayPanelLayout.createSequentialGroup()
                        .addGap(78, 78, 78)
                        .addGroup(displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(centerDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 644, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(displayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(78, Short.MAX_VALUE))
        );
        displayPanelLayout.setVerticalGroup(
            displayPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, displayPanelLayout.createSequentialGroup()
                .addGap(25, 25, 25)
                .addComponent(displayPanelLabel)
                .addGap(16, 16, 16)
                .addComponent(producerConsoleLabel)
                .addGap(32, 32, 32)
                .addComponent(displayTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(centerDisplayPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(77, 77, 77))
        );

        basePanel.add(displayPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(basePanel, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void buttonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonActionPerformed
        if (!this.producersStarted) {
            this.producersStarted = true;
            
            int sendingMode = sendModeComboBox.getSelectedIndex();
            
            System.out.println("Starting Producers: Sending mode = " + sendingMode + " | Producers number = " + 1);

            /* Initialize Producer threads */
            ISensor_Main mainSensor = (ISensor_Main)mSensor;
            mainSensor.signalStart(sendingMode, 1);
        }
    }//GEN-LAST:event_buttonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PProducer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PProducer().setVisible(true);
            }
        });
        
        /* Initialize Producer threads */
        initProducers();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /**
     * Java swing base panel.
     */
    private javax.swing.JPanel basePanel;
    /**
     * Java swing center config panel.
     */
    private javax.swing.JPanel centerConfigPanel;
    /**
     * Java swing center display panel.
     */
    private javax.swing.JPanel centerDisplayPanel;
    /**
     * Java swing config flow panel.
     */
    private javax.swing.JPanel configFlowPanel;
    /**
     * Java swing config panel.
     */
    private javax.swing.JPanel configPanel;
    /**
     * Java swing config panel label.
     */
    private javax.swing.JLabel configPanelLabel;
    /**
     * Java swing display panel.
     */
    private javax.swing.JPanel displayPanel;
    /**
     * Java swing display panel label.
     */
    private javax.swing.JLabel displayPanelLabel;
    /**
     * Java swing display text field.
     */
    public static javax.swing.JTextField displayTextField;
    /**
     * Java swing console label.
     */
    private javax.swing.JLabel producerConsoleLabel;
    /**
     * Java swing send mode combo box.
     */
    private javax.swing.JComboBox<String> sendModeComboBox;
    /**
     * Java swing send mode label.
     */
    private javax.swing.JLabel sendModeLabel;
    /**
     * Java swing start button.
     */
    private javax.swing.JButton startButton;
    /**
     * Java swing total records label.
     */
    public static javax.swing.JLabel totalRecordsLabel;
    // End of variables declaration//GEN-END:variables
}
